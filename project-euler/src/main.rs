fn main() {
    let answer_1 = euler_1();
    println!("{}", answer_1);

    let answer_2 = euler_2();
    println!("{}", answer_2);

    let answer_3 = euler_3();
    println!("{}", answer_3);
}

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
// Answer 233168
fn euler_1() -> i32 {
    let mut sum = 0;

    for i in 1..1000 {
        if i % 3 == 0 {
            sum += i;
        }
        else if i % 5 == 0 {
            sum += i;
        }
    }

    sum
}

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
// Answer 4613732
fn euler_2() -> i32 {
    let mut v = vec![1,2];

    let mut sum: i32 = v.iter().rev().take(2).sum();
    while sum < 4000000 {
        v.push(sum);
        sum = v.iter().rev().take(2).sum();
    }

    let answer: i32 = v.into_iter().filter(|x| x % 2 == 0).sum();
    answer
}


// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?
// Answer 6857
// NB this is not fast enough to check the real key space should look into profiling
fn euler_3() -> i64 {
    let upper: i64 = 600851475143 / 10000;

    for i in (2..upper).rev() {

        if 600851475143 % i == 0 {
            let mut is_prime = true;

            for j in 2..i {
                if i % j == 0 {
                    is_prime = false;
                }
            }

            if is_prime {
                if 600851475143 % i == 0 {
                    return i
                }
            }
        }
    }

    0
}


#[cfg(test)]
mod main {
    use super::*;

    #[test]
    fn test_euler_1() {
         assert_eq!(233168, euler_1());
    }

    #[test]
    fn test_euler_2() {
         assert_eq!(4613732, euler_2());
    }

    #[test]
    fn test_euler_3() {
         assert_eq!(6857, euler_3());
    }
}


